Flask 애플리케이션 초기화:

Flask 프레임워크를 사용하여 웹 애플리케이션을 만듭니다.

데이터베이스 연결과 사용자 인증 관리(Flask-Login)를 설정합니다.

모델(Todo, User)을 정의하여 데이터베이스 테이블을 생성합니다.

라우팅 및 뷰 함수:

사용자의 요청(URL)에 따라 실행되는 함수를 정의합니다.

할 일 목록 조회, 할 일 추가, 삭제, 회원가입, 로그인, 로그아웃 기능을 처리합니다.

HTML 템플릿을 사용하여 사용자에게 보여지는 페이지를 생성합니다.

데이터베이스 모델:

Todo: 할 일 정보를 저장하는 테이블 (id, content)

User: 사용자 정보를 저장하는 테이블 (id, username, password)

사용자 인증:

Flask-Login을 사용하여 사용자 인증 및 세션 관리를 처리합니다.

로그인, 로그아웃, 로그인 요구 기능을 구현합니다.

코드 상세 설명:

1. 필요한 라이브러리 임포트:

from flask import Flask, render_template, request, redirect, url_for, flash
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from models import db, Todo, User
Use code with caution.
Python
flask: Flask 웹 프레임워크의 주요 구성 요소

render_template: HTML 템플릿 렌더링

request: 사용자 요청 데이터 접근

redirect: 페이지 리다이렉트

url_for: URL 생성

flash: 일회성 메시지 표시 (알림 등)

flask_login: 사용자 인증 관리 (로그인, 로그아웃 등)

UserMixin: 사용자 모델을 위한 유틸리티 클래스

login_user: 사용자 로그인 처리

logout_user: 사용자 로그아웃 처리

login_required: 로그인된 사용자만 접근 가능하도록 설정

current_user: 현재 로그인된 사용자 객체 접근

models: 데이터베이스 모델 (db, Todo, User) 포함

2. Flask 애플리케이션 설정:

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'
app.config['SECRET_KEY'] = 'your_secret_key'
db.init_app(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))
Use code with caution.
Python
app = Flask(__name__): Flask 애플리케이션 객체 생성

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db': SQLite 데이터베이스 파일 위치 설정

app.config['SECRET_KEY'] = 'your_secret_key': 세션 및 보안을 위한 비밀 키 설정 (실제 사용시에는 복잡한 키를 사용해야 함)

db.init_app(app): SQLAlchemy 데이터베이스 객체 초기화

login_manager = LoginManager(): Flask-Login 객체 생성

login_manager.init_app(app): Flask-Login 설정 초기화

login_manager.login_view = 'login': 로그인되지 않은 사용자가 접근 시 리다이렉트될 로그인 페이지 설정

@login_manager.user_loader: 사용자 ID를 기반으로 사용자 객체를 로드하는 콜백 함수 정의

3. 데이터베이스 테이블 생성:

with app.app_context():
    db.create_all()
Use code with caution.
Python
app.app_context(): Flask 애플리케이션 컨텍스트를 설정

db.create_all(): 데이터베이스에 테이블 생성

4. 라우팅 및 뷰 함수:

할 일 목록 조회 (/):

@app.route('/')
@login_required
def index():
    todos = Todo.query.all()
    return render_template('index.html', todos=todos)
Use code with caution.
Python
login_required: 로그인된 사용자만 접근 가능하도록 설정

Todo.query.all(): 데이터베이스에서 모든 할 일 정보를 가져옴

render_template('index.html', todos=todos): 할 일 목록을 HTML 템플릿에 전달하여 렌더링

할 일 추가 (/add):

@app.route('/add', methods=['POST'])
@login_required
def add():
    content = request.form['content']
    if not content:
        return '살려주시오 날 집에 보내다오!!', 400
    new_todo = Todo(content=content)
    db.session.add(new_todo)
    db.session.commit()
    return redirect(url_for('index'))
Use code with caution.
Python
methods=['POST']: POST 요청만 처리

request.form['content']: 폼에서 할 일 내용 가져옴

if not content: 내용이 비어있으면 에러 메시지 반환

new_todo = Todo(content=content): 새로운 할 일 객체 생성

db.session.add(new_todo): 데이터베이스에 할 일 추가

db.session.commit(): 변경 사항 저장

redirect(url_for('index')): 할 일 목록 페이지로 리다이렉트

할 일 삭제 (/delete/<int:id>):

@app.route('/delete/<int:id>')
@login_required
def delete(id):
    todo_to_delete = Todo.query.get_or_404(id)
    db.session.delete(todo_to_delete)
    db.session.commit()
    return redirect(url_for('index'))
Use code with caution.
Python
<int:id>: URL에서 정수형 id를 추출

Todo.query.get_or_404(id): id에 해당하는 할 일 객체 가져옴, 없으면 404 에러

db.session.delete(todo_to_delete): 데이터베이스에서 할 일 삭제

db.session.commit(): 변경 사항 저장

redirect(url_for('index')): 할 일 목록 페이지로 리다이렉트

회원가입 (/register):

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if User.query.filter_by(username=username).first():
            flash('Username already exists')
            return redirect(url_for('register'))
        new_user = User(username=username)
        new_user.set_password(password)
        db.session.add(new_user)
        db.session.commit()
        flash('Registration successful')
        return redirect(url_for('login'))
    return render_template('register.html')
Use code with caution.
Python
methods=['GET', 'POST']: GET 및 POST 요청 모두 처리

POST 요청 시, 폼에서 사용자 이름, 비밀번호를 가져와 유저를 생성 후 데이터베이스에 저장

유저 이름 중복 시 메시지를 flash

성공 시 login 페이지로 리다이렉트

GET 요청 시 회원가입 페이지 렌더링

로그인 (/login):

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user is None or not user.check_password(password):
            flash('Invalid username or password')
            return redirect(url_for('login'))
        login_user(user)
        return redirect(url_for('index'))
    return render_template('login.html')
Use code with caution.
Python
methods=['GET', 'POST']: GET 및 POST 요청 모두 처리

POST 요청 시, 사용자 이름을 기준으로 유저를 가져온 후 비밀번호를 확인하여 로그인 처리

실패 시 메시지를 flash하고 로그인 페이지 리다이렉트

성공 시 메인 페이지로 리다이렉트

GET 요청 시 로그인 페이지 렌더링

로그아웃 (/logout):

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))
Use code with caution.
Python
login_required: 로그인된 사용자만 접근 가능하도록 설정

logout_user(): 사용자 로그아웃 처리

redirect(url_for('login')): 로그인 페이지로 리다이렉트

5. 애플리케이션 실행:

if __name__ == '__main__':
    app.run(debug=True)
Use code with caution.
Python
if __name__ == '__main__':: 현재 파일이 메인 파일로 실행되는지 확인

app.run(debug=True): Flask 개발 서버 실행 (debug 모드 활성화)